{"version":3,"sources":["TestTable/TestTable.tsx","TestTable/service.ts","App.tsx","index.tsx"],"names":["groups","text","value","TableView","headerText","useState","group","setGroup","dataSource","setDataSource","useEffect","dataCount","Employees","Designation","Mail","parseInt","tradeData","i","push","Math","floor","random","length","emp","sName","substr","indexOf","toLowerCase","getData","className","id","width","index","popupHeight","fields","onChange","e","enableVirtualization","rowHeight","height","field","visible","isPrimaryKey","clipMode","headerTemplate","services","VirtualScroll","App","rootElement","document","getElementById","render"],"mappings":"qPAaMA,EAAS,CACb,CAAEC,KAAM,UAAWC,MAAO,UAC1B,CAAED,KAAM,UAAWC,MAAO,UAC1B,CAAED,KAAM,UAAWC,MAAO,UAC1B,CAAED,KAAM,UAAWC,MAAO,UAC1B,CAAED,KAAM,UAAWC,MAAO,WAGb,SAASC,IACtB,IAZyBC,EAYzB,EAA0BC,mBAASL,EAAO,GAAGE,OAA7C,mBAAOI,EAAP,KAAcC,EAAd,KACA,EAAoCF,mBAAc,IAAlD,mBAAOG,EAAP,KAAmBC,EAAnB,KAQA,OAJAC,qBAAU,WACRD,EC5BG,SAAiBE,EAAgBL,GACtC,IAAMM,EAAY,CAChB,UACA,UACA,QACA,SACA,UACA,QACA,SACA,YACA,UACA,WACA,WACA,QACA,SACA,WACA,QACA,YACA,OACA,QACA,QACA,QACA,QACA,UACA,MACA,OACA,OACA,QAEIC,EAAc,CAClB,UACA,MACA,WACA,YACA,oBACA,iBACA,gBAEIC,EAAO,CACX,aACA,WACA,UACA,WACA,kBAEuB,kBAAdH,IAAwBA,EAAYI,SAASJ,IAGxD,IADA,IAAMK,EAAY,GACTC,EAAI,EAAGA,GAAKN,EAAWM,IAAK,CAAC,IAAD,EACnCD,EAAUE,MAAV,6BACMZ,EADN,UACsBA,EAAQW,GAD9B,0BAGIL,EAAUO,KAAKC,MAAMD,KAAKE,SAAWT,EAAUU,SAC/C,IACAV,EAAUO,KAAKC,MAAMD,KAAKE,SAAWT,EAAUU,UALnD,4BAMeT,EAAYM,KAAKC,MAAMD,KAAKE,SAAWR,EAAYS,UANlE,IAQA,IAAMC,EAAMP,EAAUC,EAAI,GAAd,UACNO,EAAQD,EAAIE,OAAO,EAAGF,EAAIG,QAAQ,MAAMC,cAC9CX,EAAUC,EAAI,GAAd,KACEO,GACCL,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,IACnC,IACAP,EAAKK,KAAKC,MAAMD,KAAKE,SAAWP,EAAKQ,SAEzC,OAAON,EDrCSY,CAAQ,IAAMtB,MAC3B,CAACA,IAGF,qBAAKuB,UAAU,eAAf,SACE,sBAAKA,UAAU,kBAAf,UACE,8BACE,cAAC,IAAD,CACEC,GAAG,QACHC,MAAM,MACNC,MAAO,EACPC,YAAY,QACZzB,WAAYR,EACZkC,OAAQ,CAAEjC,KAAM,OAAQC,MAAO,SAC/BiC,SAlBV,SAA2BC,GACzB7B,EAAS6B,EAAElC,YAoBP,eAAC,IAAD,CACE4B,GAAG,eACHO,sBAAsB,EACtBC,UAAW,GACXC,OAAO,MACP/B,WAAYA,EALd,UAQE,eAAC,IAAD,WACE,cAAC,IAAD,CACEgC,MAAK,UAAKlC,EAAL,UACLmC,SAAS,EACTC,cAAc,EACdX,MAAM,QAER,cAAC,IAAD,CACES,MAAM,YACNpC,WAAW,gBACX2B,MAAM,MACNY,SAAS,sBACTC,gBAvDaxC,EAuDqB,oBAtDvC,kBAAM,+BAAOA,QAwDV,cAAC,IAAD,CACEoC,MAAM,cACNpC,WAAW,cACX2B,MAAM,MACNY,SAAS,wBAEX,cAAC,IAAD,CACEH,MAAM,OACNpC,WAAW,OACX2B,MAAM,WAGV,cAAC,IAAD,CAAQc,SAAU,CAACC,SA5BdxC,QEhDA,SAASyC,IACtB,OACE,qBAAKlB,UAAU,MAAf,SACE,cAAC1B,EAAD,MCFN,IAAM6C,EAAcC,SAASC,eAAe,QAC5CC,iBAAO,cAACJ,EAAD,IAASC,K","file":"static/js/main.3303e2c9.chunk.js","sourcesContent":["import { DropDownListComponent } from \"@syncfusion/ej2-react-dropdowns\";\nimport {\n  ColumnDirective,\n  ColumnsDirective,\n  GridComponent,\n  Inject,\n  VirtualScroll\n} from \"@syncfusion/ej2-react-grids\";\nimport React, { useEffect, useState } from \"react\";\nimport { getData } from \"./service\";\nconst getHeaderTemplate = (headerText: any) => {\n  return () => <span>{headerText}</span>;\n};\nconst groups = [\n  { text: \"Group 1\", value: \"Group1\" },\n  { text: \"Group 2\", value: \"Group2\" },\n  { text: \"Group 3\", value: \"Group3\" },\n  { text: \"Group 4\", value: \"Group4\" },\n  { text: \"Group 5\", value: \"Group5\" }\n];\n\nexport default function TableView(): JSX.Element | null {\n  const [group, setGroup] = useState(groups[0].value);\n  const [dataSource, setDataSource] = useState<any>([]);\n  function handleChangeGroup(e: any) {\n    setGroup(e.value);\n  }\n  useEffect(() => {\n    setDataSource(getData(1000, group));\n  }, [group]);\n\n  return (\n    <div className=\"control-pane\">\n      <div className=\"control-section\">\n        <div>\n          <DropDownListComponent\n            id=\"games\"\n            width=\"220\"\n            index={0}\n            popupHeight=\"240px\"\n            dataSource={groups}\n            fields={{ text: \"text\", value: \"value\" }}\n            onChange={handleChangeGroup}\n          />\n        </div>\n        <GridComponent\n          id=\"overviewgrid\"\n          enableVirtualization={true}\n          rowHeight={38}\n          height=\"600\"\n          dataSource={dataSource}\n          key={group}\n        >\n          <ColumnsDirective>\n            <ColumnDirective\n              field={`${group}_VALUE`}\n              visible={true}\n              isPrimaryKey={true}\n              width=\"130\"\n            ></ColumnDirective>\n            <ColumnDirective\n              field=\"Employees\"\n              headerText=\"Employee Name\"\n              width=\"230\"\n              clipMode=\"EllipsisWithTooltip\"\n              headerTemplate={getHeaderTemplate(\"Custom name colum\")}\n            />\n            <ColumnDirective\n              field=\"Designation\"\n              headerText=\"Designation\"\n              width=\"170\"\n              clipMode=\"EllipsisWithTooltip\"\n            />\n            <ColumnDirective\n              field=\"Mail\"\n              headerText=\"Mail\"\n              width=\"230\"\n            ></ColumnDirective>\n          </ColumnsDirective>\n          <Inject services={[VirtualScroll]} />\n        </GridComponent>\n      </div>\n    </div>\n  );\n}\n","export function getData(dataCount: any, group: any) {\n  const Employees = [\n    'Michael',\n    'Kathryn',\n    'Tamer',\n    'Martin',\n    'Davolio',\n    'Nancy',\n    'Fuller',\n    'Leverling',\n    'Peacock',\n    'Margaret',\n    'Buchanan',\n    'Janet',\n    'Andrew',\n    'Callahan',\n    'Laura',\n    'Dodsworth',\n    'Anne',\n    'Bergs',\n    'Vinet',\n    'Anton',\n    'Fleet',\n    'Zachery',\n    'Van',\n    'King',\n    'Jack',\n    'Rose',\n  ];\n  const Designation = [\n    'Manager',\n    'CFO',\n    'Designer',\n    'Developer',\n    'Program Directory',\n    'System Analyst',\n    'Project Lead',\n  ];\n  const Mail = [\n    'sample.com',\n    'arpy.com',\n    'rpy.com',\n    'mail.com',\n    'jourrapide.com',\n  ];\n  if (typeof dataCount === 'string') dataCount = parseInt(dataCount);\n\n  const tradeData = [];\n  for (let i = 1; i <= dataCount; i++) {\n    tradeData.push({\n      [`${group}_VALUE`]: group + i,\n      Employees:\n        Employees[Math.floor(Math.random() * Employees.length)] +\n        ' ' +\n        Employees[Math.floor(Math.random() * Employees.length)],\n      Designation: Designation[Math.floor(Math.random() * Designation.length)],\n    });\n    const emp = tradeData[i - 1]['Employees'];\n    const sName = emp.substr(0, emp.indexOf(' ')).toLowerCase();\n    tradeData[i - 1]['Mail'] =\n      sName +\n      (Math.floor(Math.random() * 100) + 10) +\n      '@' +\n      Mail[Math.floor(Math.random() * Mail.length)];\n  }\n  return tradeData;\n}\n","import \"./styles.css\";\nimport TableView from \"./TestTable/TestTable\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <TableView />\n    </div>\n  );\n}\n","import { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}